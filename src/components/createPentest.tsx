"use client";
import { zodResolver } from "@hookform/resolvers/zod";
import React from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { PentestCreateAction } from "@/core/server/createPentestAction";
import { language } from "@/resource/language/language";
import { pentestFormSchema } from "@/resource/validation/validation";
import { Loader2 } from "lucide-react";
import { redirect } from "next/navigation";
import { Button } from "./ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form";
import { Input } from "./ui/input";
import { RadioGroup, RadioGroupItem } from "./ui/radio-group";
import { Textarea } from "./ui/textarea";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

export function CreatePentest() {
  const [error, setError] = React.useState<string | undefined>("");
  const [success, setSuccess] = React.useState<string | undefined>("");
  const router = useRouter();
  const [isPending, setIsPending] = React.useState<boolean>(false);

  const form = useForm<z.infer<typeof pentestFormSchema>>({
    resolver: zodResolver(pentestFormSchema),
    defaultValues: {
      name: "",
      email: "",
      pentestType: "WEB",
      pentestStatus: "PROCESS",
      scope: "",
      selectedBot: "VOLTBOT",
      selectedScanMode: "LIGHTSCAN",
    },
  });

  async function onSubmit(values: z.infer<typeof pentestFormSchema>) {
    setError("");
    setSuccess("");
    setIsPending(true);
    const data = await PentestCreateAction(values);
    if (data?.error) {
      setError(data?.error);
      toast.error(data?.error);
      setIsPending(false);
    }
    if (data?.success) {
      form.reset();
      setSuccess(data?.success);
      setIsPending(false);
      router.push("/dashboard/pentests");
    }
    setTimeout(() => {
      setError("");
      setSuccess("");
    }, 5000);
  }

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="space-y-2 w-full h-full"
      >
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{language.NAME}</FormLabel>

              <FormControl>
                <Input
                  placeholder="John Doe"
                  required
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{language.EMAIL}</FormLabel>

              <FormControl>
                <Input
                  placeholder="user@example.com"
                  required
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="pentestType"
          render={({ field }) => (
            <FormItem className="space-y-3">
              <FormLabel>{language.PENTEST_TYPE}</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex flex-row space-y-1 space-x-1"
                >
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="WEB" />
                    </FormControl>
                    <FormLabel className="font-normal">WEB</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="CLOUD" />
                    </FormControl>
                    <FormLabel className="font-normal">CLOUD</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="APPLICATION" />
                    </FormControl>
                    <FormLabel className="font-normal">APPLICATION</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="NETWORK" />
                    </FormControl>
                    <FormLabel className="font-normal">NETWORK</FormLabel>
                  </FormItem>
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="pentestStatus"
          render={({ field }) => (
            <FormItem className="space-y-3">
              <FormLabel>{language.PENTEST_STATUS}</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex flex-row space-y-1"
                >
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="PENDING" />
                    </FormControl>
                    <FormLabel className="font-normal">PENDING</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="COMPLETED" />
                    </FormControl>
                    <FormLabel className="font-normal">COMPLETED</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="PROCESS" />
                    </FormControl>
                    <FormLabel className="font-normal">PROCESS</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="FAILED" />
                    </FormControl>
                    <FormLabel className="font-normal">FAILED</FormLabel>
                  </FormItem>
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="selectedBot"
          render={({ field }) => (
            <FormItem className="space-y-3">
              <FormLabel>Selected Bot</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex flex-row space-y-1"
                >
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="VOLTBOT" />
                    </FormControl>
                    <FormLabel className="font-normal">VOLTBOT</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="HACKWING" />
                    </FormControl>
                    <FormLabel className="font-normal">HACKWING</FormLabel>
                  </FormItem>
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="selectedScanMode"
          render={({ field }) => (
            <FormItem className="space-y-3">
              <FormLabel>Selected Scan Mode</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex flex-row space-y-1"
                >
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="LIGHTSCAN" />
                    </FormControl>
                    <FormLabel className="font-normal">LIGHTSCAN</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="BALANCESCAN" />
                    </FormControl>
                    <FormLabel className="font-normal">BALANCESCAN</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-3 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="DEEPSCAN" />
                    </FormControl>
                    <FormLabel className="font-normal">DEEPSCAN</FormLabel>
                  </FormItem>
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="scope"
          render={({ field }) => (
            <FormField
              control={form.control}
              name="scope"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{language.SCOPE}</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="For example: https://www.example.com"
                      className="resize-none"
                      required
                      {...field}
                    />
                  </FormControl>

                  <FormMessage />
                </FormItem>
              )}
            />
          )}
        />

        <Button
          disabled={isPending}
          type="submit"
          className=""
        >
          {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          {isPending ? "Submitting..." : "Submit"}
        </Button>
      </form>
    </Form>
  );
}
