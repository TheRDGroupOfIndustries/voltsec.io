"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import { toast } from "sonner";

import useMutation from "@/core/hooks/useMutation";
import { createPentest } from "@/core/server/account/pentest/createPentest";
import { Pentestsettings } from "@prisma/client";
import { useRouter } from "next/navigation";
import PopUp from "./PopUp";

const WebPentest = ({ setting }: { setting: Pentestsettings }) => {
  const [PentestRequest, setPentestRequest] = useState({
    scope: "",
  });
  const [charges, setCharges] = useState<number>(0);
  const [pop, setPop] = useState<boolean>(false);
  const { mutate, isPending } = useMutation(createPentest);
  const router = useRouter();

  const getVoltCharges = async () => {
    try {
      const charges = await fetch('/api/getVoltcharge')
      const json = await charges.json();
      setCharges(json.voltsecCharges)
    }
    catch(e) 
    {console.log(e)}
  }

  const updateCharges = async () => {
    try {
      const recudeCharge = setCharges(charges - 1);
      const res = await fetch("/api/updateVoltcharge", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ currentVoltCharge: recudeCharge }),
      });
    }
    catch (err) {
      console.log(err)
    }
  }
  useEffect(() => {
    getVoltCharges();
  }, []);

  const sendData = async (e: React.FormEvent) => {
    e.preventDefault();
    setPop(true);
    if (charges <= 0) {
      toast.error("Out of voltsec charges. Please buy more.");
      return;
    }
    await updateCharges();
    const { success, error } = await mutate({
      scope: PentestRequest.scope,
      settings: setting,
    });

    if (success) {
      toast.success(success);

      router.push(`/home/pentest/web/webResult?url=${PentestRequest.scope}&mode=${setting.selectedScanMode}`);
      setPentestRequest({ scope: "" });
    } else {
      toast.error(error);
    }

    setPop(false);
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setPentestRequest({ ...PentestRequest, scope: e.target.value });
  };

  return (
    <section className="relative flex min-h-screen flex-row flex-wrap items-center justify-center bg-gradient-to-br from-blue-700 via-blue-500 to-blue-700 p-5 md:p-0 pt-10">
      {pop && <PopUp />}

      <div
        data-aos="zoom-in"
        data-aos-duration="1000"
        className="mx-auto max-w-4xl items-center gap-16 px-4 py-8 lg:grid lg:grid-cols-1 lg:px-6 lg:py-16"
      >
        <div className="rounded-3xl border border-blue-500 border-opacity-90 bg-white/10 bg-opacity-50 p-5 font-light text-slate-400 shadow-2xl backdrop-blur-sm sm:text-lg">
          <h2 className="mb-4 text-6xl font-extrabold tracking-tight text-white">
            <p className="text-white">Web Penetration Testing</p>
          </h2>
          <p className="mb-2 py-5 text-left font-light text-slate-100 sm:text-lg lg:mb-2">
            Web Applications are the blue entry point for attackers. Websites
            are often left vulnerable due to factors like enormous pressure on
            development teams to meet deadlines, vulnerable third-party APIs,
            insecure platform usages, and lack of secure coding methodologies.
          </p>
          <div className="my-2 flex h-auto flex-row justify-between rounded-sm bg-gray-50 text-left text-base font-light text-slate-100 md:h-10">
            <div className="flex flex-col items-left text-black md:flex-row">
              <span className="mx-1 font-normal flex h-full w-full flex-row items-center justify-center rounded-sm border-slate-500 px-2 text-left text-xs md:text-base">
                VoltCharge
                <span className="ml-1 font-bold text-blue-500">{charges}</span>
              </span>
              <span className="mx-1 font-normal flex h-full w-full flex-row items-center justify-center rounded-sm border-slate-500 px-2 text-left text-xs md:text-base">
                ScanMode
                <span className="ml-1 font-semibold text-blue-500">
                  {setting.selectedScanMode}
                </span>
              </span>
              <span className="mx-1 font-normal flex h-full w-full flex-row items-center justify-center rounded-sm border-slate-500 px-2 text-left text-xs md:text-base">
                Bot
                <span className="ml-1 font-semibold text-blue-500">
                  {setting.selectedBot}
                </span>
              </span>
            </div>
            <Link href="/account/pentest/setting">
              <div className="flex h-full cursor-pointer flex-row items-center justify-center rounded-r-sm border-slate-500 bg-slate-700 px-5 py-1.5 text-base font-semibold shadow-xl duration-200 hover:bg-blue-500 md:h-10">
                Setting
                <span>
                  <svg
                    fill="currentColor"
                    className="ml-2 mt-1.5 h-4 w-4"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <path
                      clipRule="evenodd"
                      fillRule="evenodd"
                      d="M7.84 1.804A1 1 0 018.82 1h2.36a1 1 0 01.98.804l.331 1.652a6.993 6.993 0 011.929 1.115l1.598-.54a1 1 0 011.186.447l1.18 2.044a1 1 0 01-.205 1.251l-1.267 1.113a7.047 7.047 0 010 2.228l1.267 1.113a1 1 0 01.206 1.25l-1.18 2.045a1 1 0 01-1.187.447l-1.598-.54a6.993 6.993 0 01-1.929 1.115l-.33 1.652a1 1 0 01-.98.804H8.82a1 1 0 01-.98-.804l-.331-1.652a6.993 6.993 0 01-1.929-1.115l-1.598.54a1 1 0 01-1.186-.447l-1.18-2.044a1 1 0 01.205-1.251l1.267-1.114a7.05 7.05 0 010-2.227L1.821 7.773a1 1 0 01-.206-1.25l1.18-2.045a1 1 0 011.187-.447l1.598.54A6.993 6.993 0 017.51 3.456l.33-1.652zM10 13a3 3 0 100-6 3 3 0 000 6z"
                    />
                  </svg>
                </span>
              </div>
            </Link>
          </div>
          <form onSubmit={charges <= 0 ? () => {} : sendData} className={`${charges <= 0 ? 'cursor-not-allowed opacity-50' : ''} w-full space-y-8`}>
            <div>
              <textarea
                id="scope"
                name="scope"
                value={PentestRequest.scope}
                onChange={handleChange}
                rows={4}
                required
                className={`resize-none outline-none block w-full h-1/4 font-normal rounded-sm border border-slate-600 bg-slate-50 p-2.5 text-sm text-black placeholder-slate-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${charges <= 0 ? 'cursor-not-allowed' : ''}`}
                placeholder="Define The Scope. Hint: 'www.domain.com'"
                disabled={charges <= 0 ? true : false}
              />
            </div>

            <button disabled={charges <= 0 ? true : false} type="submit">
              <div className={`inline-flex items-center justify-center rounded-sm bg-blue-700 px-5 py-3 text-center text-base font-medium text-white hover:bg-blue-600 focus:ring-4 focus:ring-blue-300 ${charges <= 0 ? 'cursor-not-allowed hover:bg-blue-700' : ''}`}>
                {isPending ? "Loading..." : "Launch Pentest"}
                <svg
                  className="-mr-1 ml-2 h-5 w-5"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                    clipRule="evenodd"
                  />
                </svg>
              </div>
            </button>
          </form>
        </div>
      </div>
    </section>
  );
};

export default WebPentest;
