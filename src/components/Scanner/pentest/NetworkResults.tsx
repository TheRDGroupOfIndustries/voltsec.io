"use client";

import Button from "@/components/Scanner/button";
import ErrorPage from "@/components/Scanner/error";
import ScanData from "@/components/Scanner/NetworkResults";
import useMutation from "@/core/hooks/useMutation";
import { scanWebsiteAction } from "@/core/server/home/pentest/web/scanWebsite";
import { ScanResults } from "@/lib/webscanner";
import { $Enums } from "@prisma/client";
import axios from "axios";
import Image from "next/image";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { useCallback, useEffect, useState } from "react";
import image from "/public/main.png"
import PopUp from "./PopUp";

function WebResult({ mode }: { mode: $Enums.SelectedScanMode }) {
  const searchParams = useSearchParams();
  const url = searchParams.get("url");
  const selectedMode = searchParams.get("mode");
  const [results, setResults]:any = useState([]);
  const [error, setError] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const [errorStatus, setErrorStatus] = useState<boolean>(false);
  const { mutate, isPending } = useMutation(scanWebsiteAction);
  
  const handleResult = async () => {
    window.scrollBy({
      top: window.innerHeight, // 100vh equivalent
      behavior: "smooth", // Optional for smooth scrolling
    });
  };
  const URL = "https://linguistic-olly-voltsec-c6a4acf0.koyeb.app/networkScan";

  const handleScan = useCallback(async () => {
    if (!url) {
      setError("URL is missing in the query parameters.");
      setErrorStatus(true);
      return;
    }
    try {
      setIsLoading(true);
      const req = await axios.post(`${URL}`, {
        url: url,
        mode: "light",
      })
      setResults(req.data);
      console.log(req.data);
      
    }
    catch (error:any) {
      setError(error);
      setErrorStatus(true);
    }
    finally {
      setIsLoading(false);
    }
  }, [url, mode]);

  useEffect(() => {
    if (url) {
      handleScan();
    }
  }, [url, handleScan]);
  return (
    <div className="sm:p-8 p-3 bg-gradient-to-tr from-blue-700 via-blue-500 to-blue-700 text-white shadow-lg">
      {isLoading && <PopUp />}
      {results && (
        <div className="flex flex-col">
          <div className=" rounded-3xl bg-white/20 p-5 px-5 py-5 m-10 pt-10 text-left text-white/90 shadow-2xl backdrop-blur-sm aos-init mt-20 aos-animate flex flex-col items-center justify-center mx-3 md:mx-24">
            <h1 className="md:text-7xl text-2xl font-mono font-bold text-white mb-4 text-center md:mt-2 mt-5">
              Scan Results
            </h1>
            <div className="flex flex-row justify-evenly w-72 ml-4">
              <Image
                src={image.src}
                height={800}
                width={800}
                className="mt-10 md:mt-0 mb-3"
                alt="Image of Result"
              />
            </div>
            <div className="flex flex-row justify-evenly items-stretch">
              {results && (
                <Button
                  text={"See result"}
                  onClick={() => {
                    handleResult();
                  }}
                  disabled={""}
                  className="ml-4 text-2xl"
                />
              )}
            </div>
          </div>

          {results.length > 0 && (
            <div className="mt-4">
              <h3 className="text-white text-3xl ml-4 font-bold mb-4 dark:text-white">
                Network results
              </h3>
              <h3 className="text-xl font-bold text-white mb-2"></h3>
              {/* <div className="bg-white/30 text-white shadow-2xl py-4 rounded-lg sm:mx-[8vw] mx-0 sm:w-5/6 w-full mb-2">
                <ul className=" flex flex-row justify-between items-center font-bold">
                  <li className="text-left sm:mx-16 mx-4 sm:mr-0 text-lg sm:text-2xl">Vulnerabilities</li>
                  <li className="text-right sm:mx-16 mx-4 text-lg sm:text-2xl">Level</li>
                </ul>
              </div> */}
              <ul className="list-none list-inside text-white flex flex-col justify-center items-center w-full">
              <ScanData data={results} />
              </ul>
            </div>
          )}
        </div>
      )}
      {errorStatus && (
        <div className="">
          <ErrorPage error={error} />
        </div>
      )}
    </div>
  );
}

export default WebResult;
