"use client";
import React, { useState, useEffect, useCallback } from "react";
import { Input } from "../ui/input";
import { Switch } from "../ui/switch";
import { Button } from "../ui/button";
import { ScanLine, ScanText } from "lucide-react";
import useMutation from "@/core/hooks/useMutation";
import { createShedulePentest } from "@/core/server/account/Shedule/CreateShedule";
import { toast } from "sonner";
import { PentestType, ShedulePentest } from "@prisma/client";
import { deleteSchedule } from "@/core/server/account/Shedule/IdSchedule";

const buttonClasses = (
  isActive: boolean,
  baseClass: string,
  activeClass: string
) => `${baseClass} ${isActive ? activeClass : ""}`;

const PentestSchedule = ({ data }: { data: ShedulePentest[] }) => {
  // Input field
  const [scope, setScope] = useState<string>("");
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setScope(event.target.value);
  };

  // Switch button
  const [isEnabled, setIsEnabled] = useState<boolean>(false);
  const handleSwitchChange = (checked: boolean) => {
    setIsEnabled(checked);
    console.log("New switch state:", checked);
  };

  const [timeline, setTimeline] = useState<string>("Weekly");
  const [scanType, setScanType] = useState<PentestType>(
    PentestType.APPLICATION
  );

  const { mutate: createSheduleMutation, isPending: isPendingSchedule } =
    useMutation(createShedulePentest);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const { success, error } = await createSheduleMutation({
      pentestType: scanType,
      scope: scope,
      timeline: timeline,
      emailReportToggle: isEnabled,
    });
    if (success) toast.success(success);
    else toast.error(error);
    setTimeline("Weekly");
  };

  const [deletingId, setDeletingId] = useState("");
  const { mutate: deleteAction, isPending: isDeleting } =
    useMutation(deleteSchedule);

  const handleRemove = async (idToRemove: string) => {
    setDeletingId(idToRemove);
    const { success, error } = await deleteAction(idToRemove);
    setDeletingId("");
    if (success) toast.success(success);
    else toast.error(error);
  };

  return (
    <section className="p-5">
      <form
        onSubmit={onSubmit}
        className="flex w-full flex-col items-start justify-start gap-5"
      >
        <div className="flex w-full flex-col items-start justify-start gap-2">
          <h2 className="mb-1 text-sm font-semibold text-gray-600">
            Schedule Scan
          </h2>
          <div className="flex w-full items-center justify-between gap-10">
            <Input
              placeholder="Enter Scope"
              className="border-2 px-5 py-7 text-sm"
              value={scope}
              required
              onChange={handleChange}
            />
            <div className="flex w-full items-center justify-end gap-3">
              <h3 className="mb-1 text-sm text-gray-600">Enabled</h3>
              <Switch
                checked={isEnabled}
                onCheckedChange={handleSwitchChange}
              />
            </div>
          </div>
        </div>
        <div className="flex w-full flex-col items-start justify-start">
          <h3 className="mb-1 text-sm font-semibold text-gray-600">
            Scan Mode{" "}
            <span className="cursor-pointer pl-3 text-sm text-blue-500">
              Know more
            </span>
          </h3>
          <div className="grid grid-cols-4 gap-8 pt-3">
            <Button
              type="button"
              onClick={() => setScanType(PentestType.WEB)}
              variant={"outline"}
              className={buttonClasses(
                scanType === PentestType.WEB,
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanText className="h-8 w-8 stroke-yellow-300" />
              Web
            </Button>
            <Button
              type="button"
              onClick={() => setScanType(PentestType.APPLICATION)}
              variant={"outline"}
              className={buttonClasses(
                scanType === PentestType.APPLICATION,
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanLine className="h-8 w-8 stroke-blue-300" />
              Application
            </Button>
            <Button
              type="button"
              onClick={() => setScanType(PentestType.CLOUD)}
              variant={"outline"}
              className={buttonClasses(
                scanType === PentestType.CLOUD,
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanLine className="h-8 w-8 stroke-green-300" />
              Cloud
            </Button>
            <Button
              type="button"
              onClick={() => setScanType(PentestType.NETWORK)}
              variant={"outline"}
              className={buttonClasses(
                scanType === PentestType.NETWORK,
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanLine className="h-8 w-8 stroke-green-300" />
              Network
            </Button>
          </div>
        </div>
        <div className="flex w-full flex-col items-start justify-start">
          <h3 className="mb-1 text-sm font-semibold text-gray-600">
            Type of Timeline{" "}
            <span className="cursor-pointer pl-3 text-sm text-blue-500">
              Know more
            </span>
          </h3>
          <div className="grid grid-cols-3 gap-8 pt-3">
            <Button
              type="button"
              onClick={() => setTimeline("Weekly")}
              variant={"outline"}
              className={buttonClasses(
                timeline === "Weekly",
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanText className="h-8 w-8 stroke-yellow-300" />
              Weekly
            </Button>
            <Button
              type="button"
              onClick={() => setTimeline("Monthly")}
              variant={"outline"}
              className={buttonClasses(
                timeline === "Monthly",
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanLine className="h-8 w-8 stroke-blue-300" />
              Monthly
            </Button>
            <Button
              type="button"
              onClick={() => setTimeline("Yearly")}
              variant={"outline"}
              className={buttonClasses(
                timeline === "Yearly",
                "flex items-center justify-center gap-3 border-2 p-7 text-sm text-gray-600",
                "bg-primary text-white hover:bg-primary/90 hover:text-white"
              )}
            >
              <ScanLine className="h-8 w-8 stroke-green-300" />
              Yearly
            </Button>
          </div>
        </div>
        <div className="flex w-full items-end justify-end border-t-2 border-blue-200 pt-5">
          <Button
            size={"lg"}
            type="submit"
            disabled={isPendingSchedule}
          >
            Save Schedule
          </Button>
        </div>
      </form>
      <div className="mt-4">
        {data.map(({ id, timeline, time, pentestType, scope }) => {
          return (
            <div key={id}>
              <li
                key={id}
                className="mb-10 ms-4 flex flex-row justify-between rounded-lg border border-white/30 p-2"
              >
                <div className="absolute -start-1.5 mt-2 h-3 w-3 rounded-full border border-white bg-gray-400 dark:border-gray-900 dark:bg-gray-700"></div>
                <h3 className="text-lg  text-gray-900 dark:text-black/80">
                  {/* Need to add more data in form of table or list */}
                  {scope}
                </h3>
                <h3 className="text-lg  text-gray-900 dark:text-black/80">
                  {/* Need to add more data in form of table or list */}
                  {timeline}
                </h3>
                <h3 className="text-lg  text-gray-900 dark:text-black/80">
                  {/* Need to add more data in form of table or list */}
                  {pentestType}
                </h3>

                <Button
                  type="button"
                  variant="destructive"
                  size="sm"
                  disabled={isDeleting && deletingId === id}
                  onClick={() => handleRemove(id)}
                >
                  Delete
                </Button>
              </li>
            </div>
          );
        })}
      </div>
    </section>
  );
};

export default PentestSchedule;
