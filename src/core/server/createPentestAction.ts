"use server";

import * as z from "zod";
import { db } from "@/core/client/client";
import { pentestFormSchema } from "@/resource/validation/validation";
import { revalidatePath } from "next/cache";

export const PentestCreateAction = async (
  values: z.infer<typeof pentestFormSchema>
) => {
  const validatedFields = pentestFormSchema.safeParse(values);

  if (!validatedFields.success) {
    return { error: "Invalid fields!" };
  }

  const {
    email,
    pentestStatus,
    name,
    pentestType,
    scope,
    selectedBot,
    selectedScanMode,
  } = validatedFields.data;
  console.log(email);
  const user = await db.pentest.findFirst({
    where: {
      email,
    },
  });
  if (!user) {
    return { error: "User not Found. Please check Email." };
  }
  try {
    if (email && name) {
      await db.pentest.create({
        data: {
          user: {
            connect: {
              email,
            },
          },
          membership: "FREE",
          name,
          email,
          pentestType,
          pentestStatus,
          scope,
          selectedBot,
          selectedScanMode,
        },
      });
      revalidatePath(`/dashboard/pentests`);
      return { success: "Thanks for contacting Us" };
    }
    return { error: "Something went wrong. Please try again." };
  } catch (error) {
    return { error: "Something went wrong." };
  }
};
